// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  conversations Conversation[]
  journalEntries JournalEntry[]
  moodRecords    MoodRecord[]
  sessions       Session[]
  insights       Insight[]

  @@map("users")
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@map("conversations")
}

model Message {
  id            String   @id @default(cuid())
  conversationId String
  role          String   // "user" or "assistant"
  content       String
  createdAt     DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model JournalEntry {
  id        String   @id @default(cuid())
  userId    String
  title     String?
  content   String
  mood      Float?
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("journal_entries")
}

model MoodRecord {
  id        String   @id @default(cuid())
  userId    String
  mood      Float
  note      String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mood_records")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  type      String
  duration  Int?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Insight {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  type        String
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("insights")
}
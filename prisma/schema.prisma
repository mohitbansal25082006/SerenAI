// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TherapyPlan {
  id        String   @id @default(cuid())
  userId    String
  title     String
  description String
  goals     String[] // Array of goals for the therapy plan
  activities String[] // Array of recommended activities
  resources String[] // Array of recommended resources
  duration  Int      // Duration in days
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions TherapySession[]

  @@map("therapy_plans")
}

model TherapySession {
  id        String   @id @default(cuid())
  planId    String
  title     String
  notes     String?
  mood      Float?   // Mood rating after the session
  completed Boolean  @default(false)
  scheduledFor DateTime
  completedAt DateTime?
  createdAt DateTime @default(now())

  // Relations
  plan TherapyPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("therapy_sessions")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  conversations Conversation[]
  journalEntries JournalEntry[]
  moodRecords    MoodRecord[]
  sessions       Session[]
  insights       Insight[]
  posts          Post[]
  savedPosts     SavedPost[]
  postLikes      PostLike[]
  replies        Reply[]
  therapyPlans   TherapyPlan[]

  @@map("users")
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@map("conversations")
}

model Message {
  id            String   @id @default(cuid())
  conversationId String
  role          String   // "user" or "assistant"
  content       String
  createdAt     DateTime @default(now())

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model JournalEntry {
  id        String   @id @default(cuid())
  userId    String
  title     String?
  content   String
  mood      Float?   // 1-10 scale
  tags      String[] // Array of tags
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("journal_entries")
}

model MoodRecord {
  id        String   @id @default(cuid())
  userId    String
  mood      Float    // 1-10 scale
  note      String?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mood_records")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  type      String   // "chat", "journal", "mood", etc.
  duration  Int?     // in seconds
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Insight {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  type        String   // "pattern", "suggestion", "warning"
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("insights")
}

model Post {
  id          String   @id @default(cuid())
  userId      String
  title       String
  content     String
  category    String   // "general", "features", "support", "feedback"
  tags        String[] // Array of tags
  likes       Int      @default(0)
  views       Int      @default(0)
  isPinned    Boolean  @default(false)
  isLocked    Boolean  @default(false)
  isSolved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies     Reply[]
  savedPosts  SavedPost[]
  postLikes   PostLike[]

  @@map("posts")
}

model Reply {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("replies")
}

model SavedPost {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("saved_posts")
}

model PostLike {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("post_likes")
}